[6:04 a.m., 20/5/2024] Majoüê£‚òÄÔ∏è: class Producto:
    def __init__(self, codigo, nombre, precio):
        self.codigo = codigo
        self.nombre = nombre
        self.precio = precio

class CajaRegistradora:
    def __init__(self):
        self.productos_comprados = []
        self.descuentos = {"codigo_producto": 0.1}  # Ejemplo de descuentos por c√≥digo de producto

    def escanear_producto(self, producto):
        self.productos_comprados.append(producto)

    def calcular_subtotal(self):
        subtotal = sum(producto.precio for producto in self.productos_comprados)
        return subtotal

    def aplicar_descuentos(self):
        for producto in self.productos_comprados:
       ‚Ä¶
[6:07 a.m., 20/5/2024] Majoüê£‚òÄÔ∏è: Claro, aqu√≠ tienes otra forma de implementar la caja registradora utilizando un enfoque m√°s orientado a objetos:

python
class Producto:
    def __init__(self, codigo, nombre, precio):
        self.codigo = codigo
        self.nombre = nombre
        self.precio = precio

class CajaRegistradora:
    def __init__(self):
        self.productos_comprados = []

    def escanear_producto(self, producto):
        self.productos_comprados.append(producto)

    def calcular_subtotal(self):
        subtotal = sum(producto.precio for producto in self.productos_comprados)
        return subtotal

    def aplicar_descuentos(self, descuentos):
        for producto in self.productos_comprados:
            if producto.codigo in descuentos:
                producto.precio -= producto.precio * descuentos[producto.codigo]

    def calcular_total(self):
        total = self.calcular_subtotal()
        return total

    def calcular_cambio(self, pago_cliente, total):
        cambio = pago_cliente - total
        return cambio

